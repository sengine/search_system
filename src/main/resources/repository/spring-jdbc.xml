<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
        default-autowire="byName">

    <!-- ========================= DATASOURCE DEFINITION ========================= -->

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- DataSource configuration for Apache Commons DBCP. -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
          p:driverClass="${jdbc.driverClassName}" p:jdbcUrl="${jdbc.url}"
          p:user="${jdbc.username}" p:password="${jdbc.password}"/>

    <!-- JNDI DataSource for JEE environments -->
    <!--
    <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/petclinic"/>
    -->

    <!-- Database initializer. If any of the script fails, the initialization stops. -->
    <!-- As an alternative, for embedded databases see <jdbc:embedded-database/>. -->
    <!--<jdbc:initialize-database data-source="dataSource">-->
        <!--<jdbc:script location="${jdbc.initLocation}"/>-->
        <!--<jdbc:script location="${jdbc.dataLocation}"/>-->
    <!--</jdbc:initialize-database>-->

    <!--<import resource="applicationContext-dataSource.xml"/>-->

    <!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
    <!--
    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
    -->


    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

    <!--
        Activates various annotations to be detected in bean classes: Spring's
        @Required and @Autowired, as well as JSR 250's @PostConstruct,
        @PreDestroy and @Resource (if available) and JPA's @PersistenceContext
        and @PersistenceUnit (if available).
    -->
    <context:annotation-config/>

    <!--
        Instruct Spring to retrieve and apply @AspectJ aspects which are defined
        as beans in this context (such as the CallMonitoringAspect below).
    -->
    <aop:aspectj-autoproxy/>

    <!--
        Instruct Spring to perform automatic transaction management on annotated classes.
        The SimpleJdbcClinic implementation declares @Transactional annotations.
        "proxy-target-class" is set because of SimpleJdbcClinic's @ManagedOperation usage.
    -->
    <tx:annotation-driven/>

    <!--
        Exporter that exposes the Clinic DAO and the CallMonitoringAspect via JMX,
        based on the @ManagedResource, @ManagedAttribute, and @ManagedOperation annotations.
    -->
    <!--<context:mbean-export/>-->

    <!-- PetClinic's central data access object using Spring's SimpleJdbcTemplate -->
    <bean id="dataService" class="com.searchengine.bool.repository.DataService">
        <property name="dataSource" ref="dataSource"/>
    </bean>


</beans>